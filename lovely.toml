[manifest]
version = "1.0.0"
dump_lua = true
priority = -1


#Multiply joker values function
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:calculate_joker(context)'''
position = 'before'
match_indent = true
payload = '''-- function to multiply all listed joker values
function Card:multiply_joker_values(multiplier, deep_table)
    self:calculate_joker({before_values_updated = true})
    for k, v in pairs(deep_table or self.ability) do
        if deep_table or self.config.center.config[k] then
            if type(v) == "number" then
                if not deep_table then
                    self.ability[k] = self.ability[k] * multiplier
                else
                    deep_table[k] = deep_table[k] * multiplier
                end
            elseif type(v) == "table" then
                self:multiply_joker_values(multiplier, v)
            end
        end
    end
    self:calculate_joker({after_values_updated = true})
end'''


#Adds "entering_shop" context for calculate_joker,
#and increases free_rerolls by free_rerolls_per_shop
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''                                        for i = 1, #G.GAME.tags do
                                            G.GAME.tags[i]:apply_to_run({type = 'voucher_add'})
                                        end'''
position = 'before'
match_indent = true
payload = '''for i = 1, #G.jokers.cards do
    G.jokers.cards[i]:calculate_joker({entering_shop = true})
end

if G.GAME.current_round.free_rerolls_per_shop > 0 then
    G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + G.GAME.current_round.free_rerolls_per_shop
    calculate_reroll_cost(true)
end'''


#Initializing free_rerolls_per_shop in the game object
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''free_rerolls = 0,'''
position = 'after'
match_indent = true
payload = '''free_rerolls_per_shop = 0,'''


#Adding entering_shop, before_values_updated and after_values_updated contexts checks to calculate_joker
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif context.skip_blind then'''
position = 'before'
match_indent = true
payload = '''elseif context.entering_shop then
    return
elseif context.before_values_updated then
    return
elseif context.after_values_updated then
    return
elseif context.joker_vanished then
    return'''


#Subtracting 1 from free_rerolls_per_shop upon a free reroll (if possible)
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''          G.GAME.round_scores.times_rerolled.amt = G.GAME.round_scores.times_rerolled.amt + 1'''
position = 'after'
match_indent = true
payload = '''          if G.GAME.current_round.free_rerolls_per_shop > 0 then
           G.GAME.current_round.free_rerolls_per_shop = G.GAME.current_round.free_rerolls_per_shop - 1
          end'''


#Subtracting the remaining free_rerolls_per_shop from free_rerolls, then setting it to zero
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''      for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({ending_shop = true})
      end'''
position = 'before'
match_indent = true
payload = '''
      if G.GAME.current_round.free_rerolls_per_shop > 0 then
       G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls - G.GAME.current_round.free_rerolls_per_shop
       calculate_reroll_cost(true)
      end
      G.GAME.current_round.free_rerolls_per_shop = 0'''


[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''SMODS.calculate_context({reroll_shop = true})'''
position = 'after'
match_indent = true
payload = '''
G.GAME.current_round.reroll_shop_context_caught = false'''


#Fix for the level_up joker effect (used for Space Joker)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''level_up_hand(G.jokers.cards[i], text)'''
position = 'at'
match_indent = true
payload = '''level_up_hand(G.jokers.cards[i], text, nil, effects.jokers.level_up)'''


#Initializing skip_ranks in the game object
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''rental_rate = 3,'''
position = 'after'
match_indent = true
payload = '''straight_rank_gap = 1,
straight_or_flush_min_length = 5,'''


[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''function get_flush(hand)
  local ret = {}
  local four_fingers = next(find_joker('Four Fingers'))
  local suits = SMODS.Suit.obj_buffer
  if #hand < (5 - (four_fingers and 1 or 0)) then return ret else
    for j = 1, #suits do
      local t = {}
      local suit = suits[j]
      local flush_count = 0
      for i=1, #hand do
        if hand[i]:is_suit(suit, nil, true) then flush_count = flush_count + 1;  t[#t+1] = hand[i] end 
      end
      if flush_count >= (5 - (four_fingers and 1 or 0)) then
        table.insert(ret, t)
        return ret
      end
    end
    return {}
  end
end'''
position = 'at'
match_indent = true
payload = '''function get_flush(hand)
  local ret = {}
  local suits = SMODS.Suit.obj_buffer
  for j = 1, #suits do
    local t = {}
    local suit = suits[j]
    local flush_count = 0
    for i=1, #hand do
      if hand[i]:is_suit(suit, nil, true) then flush_count = flush_count + 1;  t[#t+1] = hand[i] end 
    end
    if flush_count >= G.GAME.straight_or_flush_min_length then
      table.insert(ret, t)
      return ret
    end
  end
  return {}
end'''


[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''function get_straight(hand)
	local ret = {}
	local four_fingers = next(SMODS.find_card('j_four_fingers'))
	local can_skip = next(SMODS.find_card('j_shortcut'))
	if #hand < (5 - (four_fingers and 1 or 0)) then return ret end
	local t = {}
	local RANKS = {}
	for i = 1, #hand do
		if hand[i]:get_id() > 0 then
			local rank = hand[i].base.value
			RANKS[rank] = RANKS[rank] or {}
			RANKS[rank][#RANKS[rank] + 1] = hand[i]
		end
	end
	local straight_length = 0
	local straight = false
	local skipped_rank = false
	local vals = {}
	for k, v in pairs(SMODS.Ranks) do
		if v.straight_edge then
			table.insert(vals, k)
		end
	end
	local init_vals = {}
	for _, v in ipairs(vals) do
		init_vals[v] = true
	end
	if not next(vals) then table.insert(vals, 'Ace') end
	local initial = true
	local br = false
	local end_iter = false
	local i = 0
	while 1 do
		end_iter = false
		if straight_length >= (5 - (four_fingers and 1 or 0)) then
			straight = true
		end
		i = i + 1
		if br or (i > #SMODS.Rank.obj_buffer + 1) then break end
		if not next(vals) then break end
		for _, val in ipairs(vals) do
			if init_vals[val] and not initial then br = true end
			if RANKS[val] then
				straight_length = straight_length + 1
				skipped_rank = false
				for _, vv in ipairs(RANKS[val]) do
					t[#t + 1] = vv
				end
				vals = SMODS.Ranks[val].next
				initial = false
				end_iter = true
				break
			end
		end
		if not end_iter then
			local new_vals = {}
			for _, val in ipairs(vals) do
				for _, r in ipairs(SMODS.Ranks[val].next) do
					table.insert(new_vals, r)
				end
			end
			vals = new_vals
			if can_skip and not skipped_rank then
				skipped_rank = true
			else
				straight_length = 0
				skipped_rank = false
				if not straight then t = {} end
				if straight then break end
			end
		end
	end
	if not straight then return ret end
	table.insert(ret, t)
	return ret
end'''
position = 'at'
match_indent = true
payload = '''function get_straight(hand)
    local aces_count = 0
    local card_ranks = {}
    for i = 1, #hand do
        local card_id = hand[i]:get_id()
        if card_id == 14 then
            card_ranks[1] = true
            aces_count = aces_count + 1
        end
        card_ranks[card_id] = true
    end
    local card_ranks_sorted = {}
    for card_rank, v in pairs(card_ranks) do table.insert(card_ranks_sorted, card_rank) end
    table.sort(card_ranks_sorted)
  
    local straights = {
        {}
    }
    for i, rank in ipairs(card_ranks_sorted) do
        local kk, next_rank = next(card_ranks_sorted, i)
        straights[#straights][rank] = true
        if next_rank then
            if (next_rank - rank) > G.GAME.straight_rank_gap then
                straights[#straights + 1] = {}
            end
        end
    end
  
    local straight_final = {}
    for k, straight_sequence in ipairs(straights) do
        if straight_sequence[1] and straight_sequence[14] and (aces_count < 2) then
            straight_sequence[1] = nil
        end
        local count = 0
        for _ in pairs(straight_sequence) do count = count + 1 end
        if count >= G.GAME.straight_or_flush_min_length then
            for rank, vv in pairs(straight_sequence) do
                if rank == 1 then straight_final[14] = true else straight_final[rank] = true end
            end
        end
    end
  
    local t = {}
    local ret = {}
    for i = 1, #hand do
        local card_id = hand[i]:get_id()
        if straight_final[card_id] then
            t[#t + 1] = hand[i]
        end
    end
    
    if #t ~= 0 then table.insert(ret, t) end
    
    return ret
end'''