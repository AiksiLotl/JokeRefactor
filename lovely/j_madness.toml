[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''j_madness=          {order = 64,  unlocked = true, discovered = false, blueprint_compat = true, perishable_compat = false, eternal_compat = true, rarity = 2, cost = 7, name = "Madness", pos = {x=8,y=11}, set = "Joker", cost_mult = 1.0, config = {extra = 0.5}},'''
position = 'at'
match_indent = true
payload = '''j_madness=          {order = 64,  unlocked = true, discovered = false, blueprint_compat = true, perishable_compat = false, eternal_compat = true, rarity = 2, cost = 7, name = "Madness", pos = {x=8,y=11}, set = "Joker", cost_mult = 1.0, config = {x_mult_mod = 0.5, x_mult = 1.0, jokers_amount = 1}},'''


[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Madness' then loc_vars = {self.ability.extra, self.ability.x_mult}'''
position = 'at'
match_indent = true
payload = '''elseif self.ability.name == 'Madness' then loc_vars = {
    self.ability.x_mult_mod, 
    self.ability.x_mult,
    self.ability.jokers_amount,
    (self.ability.jokers_amount ~= 1 and "s" or ""),
}'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'Madness' and not context.blueprint and not context.blind.boss then
    self.ability.x_mult = self.ability.x_mult + self.ability.extra
    local destructable_jokers = {}
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] ~= self and not G.jokers.cards[i].ability.eternal and not G.jokers.cards[i].getting_sliced then destructable_jokers[#destructable_jokers+1] = G.jokers.cards[i] end
    end
    local joker_to_destroy = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('madness')) or nil

    if joker_to_destroy and not (context.blueprint_card or self).getting_sliced then 
        joker_to_destroy.getting_sliced = true
        G.E_MANAGER:add_event(Event({func = function()
            (context.blueprint_card or self):juice_up(0.8, 0.8)
            joker_to_destroy:start_dissolve({G.C.RED}, nil, 1.6)
        return true end }))
    end
    if not (context.blueprint_card or self).getting_sliced then
        card_eval_status_text((context.blueprint_card or self), 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_xmult', vars = {self.ability.x_mult}}})
    end
end'''
position = 'at'
match_indent = true
payload = '''if self.ability.name == 'Madness' and not context.blueprint and not context.blind.boss then
    local destructable_jokers = {}
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] ~= self and not G.jokers.cards[i].ability.eternal and not G.jokers.cards[i].getting_sliced then destructable_jokers[#destructable_jokers+1] = G.jokers.cards[i] end
    end
    if (#destructable_jokers == 0) or (self.ability.jokers_amount < 1) then
        self.ability.x_mult = self.ability.x_mult + self.ability.x_mult_mod
        card_eval_status_text((context.blueprint_card or self), 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_xmult', vars = {self.ability.x_mult}}})
    else
        for i = 1, self.ability.jokers_amount do
            local joker_to_destroy = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('madness')) or nil
            for k, v in ipairs(destructable_jokers) do
                if v == joker_to_destroy then
                    destructable_jokers[k] = nil
                end
            end

            if joker_to_destroy and not (context.blueprint_card or self).getting_sliced then 
                joker_to_destroy.getting_sliced = true
                G.E_MANAGER:add_event(Event({func = function()
                    (context.blueprint_card or self):juice_up(0.8, 0.8)
                    joker_to_destroy:start_dissolve({G.C.RED}, nil, 1.6)
                return true end }))
                self.ability.x_mult = self.ability.x_mult + self.ability.x_mult_mod
                card_eval_status_text((context.blueprint_card or self), 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_xmult', vars = {self.ability.x_mult}}})
            end
        end
    end
end'''